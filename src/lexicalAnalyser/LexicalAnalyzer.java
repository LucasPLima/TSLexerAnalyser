/* The following code was generated by JFlex 1.7.0 */

package lexicalAnalyser;

import java_cup.runtime.*;
import util.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/lucas/IdeaProjects/TSLexerAnalyser/src/lexicalAnalyser/language.lex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\7\1\7\1\7\1\7\22\0\1\7\1\20\1\5"+
    "\1\6\1\11\1\14\1\23\1\11\1\10\1\10\1\14\1\15\1\11"+
    "\1\16\1\11\1\13\1\3\11\2\1\11\1\11\1\22\1\17\1\21"+
    "\1\25\1\6\1\63\1\57\2\1\1\62\6\1\1\65\1\1\1\60"+
    "\1\64\3\1\1\61\1\1\1\66\5\1\1\10\1\12\1\10\1\25"+
    "\1\4\1\11\1\41\1\43\1\42\1\30\1\31\1\37\1\50\1\46"+
    "\1\26\1\56\1\45\1\32\1\51\1\27\1\36\1\35\1\55\1\44"+
    "\1\40\1\33\1\47\1\54\1\53\1\52\1\34\1\1\1\11\1\24"+
    "\1\11\1\25\6\0\1\7\32\0\1\7\u15df\0\1\7\u097f\0\13\7"+
    "\35\0\1\7\1\7\5\0\1\7\57\0\1\7\u0fa0\0\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\1\1\5\1\6\1\7"+
    "\1\5\12\10\34\3\1\0\1\11\1\12\1\10\2\13"+
    "\53\3\1\0\57\3\1\14\12\3\1\13\23\3\1\0"+
    "\17\3\1\13\32\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\67\0\67"+
    "\0\67\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294"+
    "\0\u02cb\0\u0302\0\67\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u0113"+
    "\0\67\0\67\0\u093d\0\u0974\0\u0906\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u0906\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2"+
    "\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa"+
    "\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562"+
    "\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a"+
    "\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a"+
    "\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u1f5e\0\u2bd4\0\u2c0b"+
    "\0\u2c42\0\u2c79";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\2\1\7"+
    "\1\10\2\11\1\12\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\3\1\43\1\44\1\45\1\3"+
    "\1\46\1\47\2\3\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\43\70\0\1\57\2\0\1\57\21\0"+
    "\41\57\2\0\2\4\65\0\2\5\64\0\4\60\1\61"+
    "\4\60\1\0\54\60\13\0\1\62\3\0\1\23\66\0"+
    "\1\23\64\0\1\23\1\0\1\23\65\0\2\23\66\0"+
    "\1\13\66\0\1\23\1\0\1\63\64\0\1\23\2\0"+
    "\1\23\67\0\1\23\67\0\1\23\43\0\1\57\2\0"+
    "\1\57\21\0\1\57\1\64\7\57\1\65\11\57\1\66"+
    "\15\57\1\0\1\57\2\0\1\57\21\0\3\57\1\67"+
    "\15\57\1\70\17\57\1\0\1\57\2\0\1\57\21\0"+
    "\3\57\1\71\4\57\1\65\30\57\1\0\1\57\2\0"+
    "\1\57\21\0\1\57\1\72\2\57\1\73\17\57\1\74"+
    "\14\57\1\0\1\57\2\0\1\57\21\0\1\75\2\57"+
    "\1\76\35\57\1\0\1\57\2\0\1\57\21\0\6\57"+
    "\1\77\7\57\1\100\1\57\1\101\20\57\1\0\1\57"+
    "\2\0\1\57\21\0\1\102\40\57\1\0\1\57\2\0"+
    "\1\57\21\0\13\57\1\103\2\57\1\104\2\57\1\105"+
    "\17\57\1\0\1\57\2\0\1\57\21\0\11\57\1\65"+
    "\3\57\1\106\23\57\1\0\1\57\2\0\1\57\21\0"+
    "\1\107\7\57\1\110\2\57\1\111\2\57\1\112\2\57"+
    "\1\113\17\57\1\0\1\57\2\0\1\57\21\0\3\57"+
    "\1\76\1\57\1\114\1\115\12\57\1\116\3\57\1\117"+
    "\13\57\1\0\1\57\2\0\1\57\21\0\1\57\1\120"+
    "\10\57\1\65\26\57\1\0\1\57\2\0\1\57\21\0"+
    "\4\57\1\121\3\57\1\122\2\57\1\123\25\57\1\0"+
    "\1\57\2\0\1\57\21\0\10\57\1\124\5\57\1\125"+
    "\22\57\1\0\1\57\2\0\1\57\21\0\3\57\1\126"+
    "\35\57\1\0\1\57\2\0\1\57\21\0\1\57\1\127"+
    "\37\57\1\0\1\57\2\0\1\57\21\0\3\57\1\76"+
    "\35\57\1\0\1\57\2\0\1\57\21\0\10\57\1\130"+
    "\30\57\1\0\1\57\2\0\1\57\21\0\1\131\17\57"+
    "\1\132\20\57\1\0\1\57\2\0\1\57\21\0\10\57"+
    "\1\133\2\57\1\110\25\57\1\0\1\57\2\0\1\57"+
    "\21\0\10\57\1\134\30\57\1\0\1\57\2\0\1\57"+
    "\21\0\21\57\1\135\17\57\1\0\1\57\2\0\1\57"+
    "\21\0\5\57\1\136\33\57\1\0\1\57\2\0\1\57"+
    "\21\0\1\57\1\137\37\57\1\0\1\57\2\0\1\57"+
    "\21\0\1\57\1\140\37\57\1\0\1\57\2\0\1\57"+
    "\21\0\15\57\1\106\23\57\1\0\1\57\2\0\1\57"+
    "\21\0\1\75\40\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\41\57\21\0\1\23\46\0\1\57\1\141\1\0"+
    "\1\57\21\0\5\57\1\142\4\57\1\143\26\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\7\57\1\144\31\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\25\57\1\65"+
    "\13\57\1\0\1\57\1\141\1\0\1\57\21\0\4\57"+
    "\1\145\16\57\1\146\15\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\4\57\1\147\4\57\1\150\2\57\1\151"+
    "\1\152\23\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\21\57\1\153\17\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\12\57\1\154\26\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\5\57\1\155\1\57\1\156\31\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\12\57\1\157\26\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\5\57\1\65"+
    "\33\57\1\0\1\57\1\141\1\0\1\57\21\0\7\57"+
    "\1\160\31\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\6\57\1\65\12\57\1\154\17\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\1\161\15\57\1\162\22\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\3\57\1\163\35\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\14\57\1\164"+
    "\24\57\1\0\1\57\1\141\1\0\1\57\21\0\1\165"+
    "\7\57\1\166\30\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\15\57\1\167\23\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\30\57\1\170\10\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\1\57\1\171\37\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\16\57\1\65\22\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\4\57\1\73\34\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\10\57\1\153"+
    "\30\57\1\0\1\57\1\141\1\0\1\57\21\0\1\57"+
    "\1\172\37\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\13\57\1\173\2\57\1\174\22\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\23\57\1\175\15\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\7\57\1\176\31\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\1\177\40\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\6\57\1\65\32\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\13\57\1\200"+
    "\25\57\1\0\1\57\1\141\1\0\1\57\21\0\1\57"+
    "\1\201\37\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\5\57\1\202\4\57\1\154\26\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\10\57\1\203\30\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\3\57\1\204\35\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\5\57\1\205\21\57"+
    "\1\206\11\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\2\57\1\207\36\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\2\57\1\210\36\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\5\57\1\211\33\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\1\212\40\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\1\213\40\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\10\57\1\214\30\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\4\57\1\215\16\57\1\216"+
    "\15\57\1\0\1\57\1\141\1\0\1\57\21\0\16\57"+
    "\1\217\22\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\21\57\1\220\17\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\6\57\1\221\32\57\2\0\2\141\1\222\63\0"+
    "\1\57\1\141\1\0\1\57\21\0\3\57\1\223\35\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\5\57\1\224"+
    "\33\57\1\0\1\57\1\141\1\0\1\57\21\0\4\57"+
    "\1\225\3\57\1\226\30\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\4\57\1\65\34\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\15\57\1\176\23\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\3\57\1\227\35\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\13\57\1\230\25\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\4\57\1\231"+
    "\34\57\1\0\1\57\1\141\1\0\1\57\21\0\21\57"+
    "\1\232\17\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\23\57\1\65\15\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\3\57\1\65\35\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\3\57\1\233\35\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\10\57\1\226\30\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\5\57\1\221\33\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\3\57\1\234\35\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\12\57\1\65"+
    "\26\57\1\0\1\57\1\141\1\0\1\57\21\0\10\57"+
    "\1\67\30\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\4\57\1\213\34\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\17\57\1\235\21\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\26\57\1\236\12\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\5\57\1\237\33\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\4\57\1\240\34\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\3\57\1\241\35\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\13\57\1\242"+
    "\25\57\1\0\1\57\1\141\1\0\1\57\21\0\14\57"+
    "\1\243\24\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\5\57\1\240\33\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\1\244\40\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\15\57\1\245\23\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\3\57\1\110\35\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\5\57\1\202\33\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\12\57\1\161\26\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\5\57\1\246\4\57"+
    "\1\247\26\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\14\57\1\211\24\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\4\57\1\250\34\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\13\57\1\251\25\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\21\57\1\252\17\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\21\57\1\253\17\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\3\57\1\254\35\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\21\57\1\212"+
    "\17\57\1\0\1\57\1\141\1\0\1\57\21\0\20\57"+
    "\1\65\20\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\4\57\1\154\34\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\2\57\1\65\36\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\4\57\1\255\34\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\4\57\1\221\34\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\15\57\1\256\23\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\1\257\40\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\23\57\1\221\15\57"+
    "\1\0\1\260\2\0\1\260\21\0\41\260\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\16\57\1\261\22\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\13\57\1\262\25\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\3\57\1\263"+
    "\35\57\1\0\1\57\1\141\1\0\1\57\21\0\16\57"+
    "\1\76\22\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\5\57\1\154\33\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\21\57\1\264\17\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\13\57\1\265\25\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\22\57\1\266\16\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\1\57\1\267\37\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\10\57\1\270\30\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\13\57\1\271"+
    "\25\57\1\0\1\57\1\141\1\0\1\57\21\0\13\57"+
    "\1\227\25\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\3\57\1\272\35\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\1\273\40\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\14\57\1\157\24\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\4\57\1\274\34\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\5\57\1\275\33\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\1\57\1\276\37\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\10\57\1\145\30\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\1\277\40\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\5\57\1\300"+
    "\33\57\1\0\1\57\1\141\1\0\1\57\21\0\3\57"+
    "\1\301\35\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\17\57\1\65\21\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\16\57\1\302\22\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\1\265\40\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\11\57\1\303\27\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\3\57\1\304\35\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\3\57\1\305\35\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\1\57\1\306\37\57"+
    "\1\0\1\260\1\141\1\0\1\260\21\0\41\260\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\11\57\1\307\27\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\1\57\1\310"+
    "\37\57\1\0\1\57\1\141\1\0\1\57\21\0\23\57"+
    "\1\311\15\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\4\57\1\76\34\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\16\57\1\154\22\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\22\57\1\176\16\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\2\57\1\161\36\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\11\57\1\65\27\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\22\57\1\154\16\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\14\57\1\312"+
    "\24\57\1\0\1\57\1\141\1\0\1\57\21\0\14\57"+
    "\1\65\24\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\4\57\1\120\34\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\1\313\40\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\22\57\1\65\16\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\1\57\1\314\37\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\16\57\1\315\22\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\13\57\1\302\25\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\1\57\1\65\37\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\1\316\40\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\13\57\1\317"+
    "\25\57\1\0\1\57\1\141\1\0\1\57\21\0\16\57"+
    "\1\221\22\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\22\57\1\221\16\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\13\57\1\320\25\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\14\57\1\321\24\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\3\57\1\322\35\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\5\57\1\323\33\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\10\57\1\302\30\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\21\57\1\154"+
    "\17\57\1\0\1\57\1\141\1\0\1\57\21\0\21\57"+
    "\1\324\17\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\1\57\1\325\37\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\1\57\1\221\37\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\14\57\1\154\24\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\3\57\1\326\35\57\1\0\1\57"+
    "\1\141\1\0\1\57\21\0\1\57\1\327\37\57\1\0"+
    "\1\57\1\141\1\0\1\57\21\0\3\57\1\213\35\57"+
    "\1\0\1\57\1\141\1\0\1\57\21\0\14\57\1\330"+
    "\24\57\1\0\1\57\1\141\1\0\1\57\21\0\3\57"+
    "\1\331\35\57\1\0\1\57\1\141\1\0\1\57\21\0"+
    "\5\57\1\161\33\57\1\0\1\57\1\141\1\0\1\57"+
    "\21\0\5\57\1\332\33\57\1\0\1\57\1\141\1\0"+
    "\1\57\21\0\2\57\1\221\36\57\1\0\1\57\1\141"+
    "\1\0\1\57\21\0\10\57\1\110\30\57";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\3\11\11\1\1\11\34\1\1\0"+
    "\2\11\56\1\1\0\116\1\1\0\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

private Token createToken(String name, String value) {
    return new Token( name, value, yyline);
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return createToken("INDEX", yytext());
            } 
            // fall through
          case 13: break;
          case 2: 
            { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + yyline);
            } 
            // fall through
          case 14: break;
          case 3: 
            { return createToken("IDENTIFIER", yytext());
            } 
            // fall through
          case 15: break;
          case 4: 
            { return createToken("NUMBER", yytext());
            } 
            // fall through
          case 16: break;
          case 5: 
            { return createToken("DELIMITER", "\""+ yytext() + "\"");
            } 
            // fall through
          case 17: break;
          case 6: 
            { /**/
            } 
            // fall through
          case 18: break;
          case 7: 
            { return createToken("INDEX_DELIMITER", "\""+ yytext() + "\"");
            } 
            // fall through
          case 19: break;
          case 8: 
            { return createToken("OPERATOR", yytext());
            } 
            // fall through
          case 20: break;
          case 9: 
            { return createToken("LITERAL", yytext());
            } 
            // fall through
          case 21: break;
          case 10: 
            { return createToken("COMMENTS", yytext());
            } 
            // fall through
          case 22: break;
          case 11: 
            { return createToken("KEYWORD", yytext());
            } 
            // fall through
          case 23: break;
          case 12: 
            { return createToken("TYPE", yytext());
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
